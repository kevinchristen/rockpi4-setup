#+TITLE: Setting up my Rock Pi 4B
#+AUTHOR: Kevin Christen
* Introduction
This file contains notes taken while setting up my Rock Pi 4B with Ubuntu
Server. The goal is for the Rock Pi to be a NAS server with Samba, and a
media server with Plex. These services are run in Docker containers.
* Set up serial console
I have followed the documentation [[https://wiki.radxa.com/Rockpi4/dev/serial-console][here]], but have not been able to get the
serial console working correctly with either of these cables:
+ The /ADAFRUIT Industries 954 USB-to-TTL Serial Cable/ with the /SiLabs
  CP2012/ chip. It is only rated to 1M baud, whereas the console is
  allegedly 1.5M baud. It produces a mix of gibberish and correct screen
  output but the keyboard input works fine, so you can get some work done.
+ The /DSD TECH SH-U09G USB to TTL Serial Cable/ with the /FTDI FT232RL/
  chip. I haven't been able to get this one working at all.

Note that the color coding is different between these cables:

+ Adafruit: black GND, white TXD, green RXD
+ DSD: black GND, blue TXD, white RXD

I have tried both ~screen~ (command below) and CoolTerm. Both somewhat work
with the ADAFruit cable.
** Commands
Run these on the system you will be connecting from, obviously.
1. ~brew install lsusb~
2. ~lsusb~
3. Plug in adapter and check for device
   #+BEGIN_EXAMPLE
   $ ll /dev/tty.usbserial-0001
   crw-rw-rw-  1 root  wheel  0x9000004 May 10 13:54 /dev/tty.usbserial-0001
   #+END_EXAMPLE
4. ~screen /dev/tty.usbserial-0001 1500000,cs8,-ixon~
* WiFi
Turn on wifi manually: ~sudo nmcli d wifi connect Fitzgerald password
***~. Configure WiFi by creating file /etc/network/interfaces.d/wlan0:
#+BEGIN_EXAMPLE
auto wlan0
iface wlan0 inet dhcp
wpa-essid <SSID>
wpa-psk <SSID password>
#+END_EXAMPLE
Turn off MAC randomization, which causes unstable connections:
#+BEGIN_EXAMPLE
$ cat /etc/NetworkManager/conf.d/disable-random-mac.conf
[device]
wifi.scan-rand-mac-address=no
#+END_EXAMPLE
* Flash OS to eMMC
The eMMC is /\slash{}\slash{}dev\slash{}mmcblk2/. The root filesystem is
partition 5, which is /\slash{}\slash{}dev\slash{}mmcblk2p5/.
1. Download and decompress image, then install it:

   ~sudo dd if=rockpi-4b-ubuntu-focal-server-arm64-20220506-0241-gpt.img of=/dev/mmcblk2 bs=16M~
2. ~mkdir /tmp/mnt~
3. ~sudo mount /dev/mmcblk2p5 /tmp/mnt~
4. ~ls /tmp/mnt~

   You should see a root filesystem
5. Power down, remove uSD card, and power up
6. ~sudo apt update && sudo apt upgrade~
7. Reboot again
8. Change the /rock/ password
* Install NVMe SSD
1. ~sudo apt install nvme-cli~
2. Find device:
   #+BEGIN_EXAMPLE
   $ sudo nvme list
   Node             SN                   Model                                    Namespace Usage                      Format           FW Rev
   ---------------- -------------------- ---------------------------------------- --------- -------------------------- ---------------- --------
   /dev/nvme0n1     215022801330         WD_BLACK  SN750 2TB                      1           2.00  TB /   2.00  TB    512   B +  0 B   112000WD
   #+END_EXAMPLE
3. Create physical volume: ~sudo pvcreate /dev/nvme0n1~
4. Create volume group: ~sudo vgcreate rockpi /dev/nvme0n1~
5. Create logical volume: ~sudo lvcreate -L 750G -n TimeMachine rockpi~
6. Create filesystem: ~sudo mkfs.ext4 /dev/rockpi/TimeMachine~
7. Enable weekly TRIM
   #+BEGIN_EXAMPLE
   sudo systemctl enable fstrim.timer
   sudo systemctl start fstrim.timer
   #+END_EXAMPLE
8. Add to fstab and mount
   #+BEGIN_EXAMPLE
   /dev/rockpi/TimeMachine /mnt/TimeMachine ext4 noatime 0 2
   #+END_EXAMPLE
* Turn on syslogd
Not sure why this isn't automatic.
1. ~sudo apt install inetutils-syslogd~
2. ~sudo systemctl start inetutils-syslogd~
3. ~sudo systemctl enable inetutils-syslogd~
* Install and start services
Install docker and docker-compose, then start each of the services:

  + ~sudo docker-compose -f plex-docker.yaml up --detach~
  + ~sudo docker-compose -f portainer-docker.yaml up --detach~
  + ~sudo docker-compose -f samba-docker.yaml -f samba-docker-override.yaml up --detach~

    /samba-docker-override.yaml/ contains user names and passwords,
    and isn't included in this repo. The other docker compose files
    are.

To shut them down, replace /up --detach/ with /down/.
* Backups to S3
1. Install s3fs, borgbackup, and cron
2. ~sudo systemctl enable cron~
3. Create bucket (/18c99540-161d-4396-a54d-9824a659024d/ in this case)
4. Create IAM user with this policy:
   #+BEGIN_EXAMPLE
   {
       "Version": "2012-10-17",
       "Statement": [
           {
               "Sid": "S3BackupPolicy",
               "Effect": "Allow",
               "Action": [
                   "s3:DeleteObject",
                   "s3:GetObject",
                   "s3:ListBucket",
                   "s3:PutObject"
               ],
               "Resource": [
                   "arn:aws:s3:::18c99540-161d-4396-a54d-9824a659024d",
                   "arn:aws:s3:::18c99540-161d-4396-a54d-9824a659024d/*"
               ]
           }
       ]
   }
   #+END_EXAMPLE
5. Add the IAM user's credentials to
   /\slash{}root​\slash{}.aws​\slash{}credentials/ with the profile name
   /backup/.
6. Create mount point
7. Add this to /​/etc\slash{}fstab/:
   #+BEGIN_EXAMPLE
   18c99540-161d-4396-a54d-9824a659024d /mnt/18c99540-161d-4396-a54d-9824a659024d fuse.s3fs noauto,rw,allow_other,umask=0007,uid=1001,gid=1001,endpoint=us-west-2,url=https://s3-us-west-2.amazonaws.com,profile=backup 0 2
   #+END_EXAMPLE
8. Run [[file:bin/backup.sh][bin/backup.sh]] from a cron job ([[file:bin/crontab][example crontab]]).
